<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Array | Web 前端开发]]></title>
  <link href="http://windyGex.github.io/blog/categories/array/atom.xml" rel="self"/>
  <link href="http://windyGex.github.io/"/>
  <updated>2014-01-23T15:07:02+08:00</updated>
  <id>http://windyGex.github.io/</id>
  <author>
    <name><![CDATA[蓝面小生]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于JavaScript数组的一点小技巧]]></title>
    <link href="http://windyGex.github.io/blog/guan-yu-javascriptshu-zu-de-xiang-guan-zhi-shi/"/>
    <updated>2014-01-23T13:44:05+08:00</updated>
    <id>http://windyGex.github.io/blog/guan-yu-javascriptshu-zu-de-xiang-guan-zhi-shi</id>
    <content type="html"><![CDATA[<h2>创建和判断</h2>

<p>在JavaScript创建一个数组非常简单,就像下面一样</p>

<p>``` javascript</p>

<p>var purchaseList = []</p>

<p>```</p>

<!-- more -->


<p>但是判断起来却稍微有点麻烦，不过没关系，现在大家都已经知道了这个差别</p>

<p>``` javascript</p>

<p>typeof purchaseList === &lsquo;array&rsquo; // false</p>

<p>//使用下面的方式</p>

<p>Object.prototype.toString.call(purchaseList) === &lsquo;[object Array]&rsquo;</p>

<p>```</p>

<h2>使用map和filter映射和查询数组</h2>

<h3><code>map</code></h3>

<p>该方法返回一个新的数组</p>

<p>``` javascript</p>

<p>// 不使用map</p>

<p>var purchaseList = [1,2,3],</p>

<pre><code>otherList = [];
</code></pre>

<p>purchaseList.forEach(function(item){
   otherList.push(item + 2);
});</p>

<p>// 使用map</p>

<p>otherList = purchaseList.map(function(item){</p>

<pre><code>return item + 2;
</code></pre>

<p>});</p>

<p>```</p>

<h3><code>filter</code></h3>

<p>该方法用于过滤数组</p>

<p>``` javascript</p>

<p>// 不使用filter</p>

<p>var purchaseList = [1,2,3],</p>

<pre><code>otherList = [],
condition = function(item,index){
    return item &gt; 2;
};
</code></pre>

<p>purchaseList.forEach(function(item,index){
   if(condition(item,index)){</p>

<pre><code>    otherList.push(item);
</code></pre>

<p>   }
});</p>

<p>// 使用filter</p>

<p>otherList = purchaseList.filter(condition);</p>

<p>```</p>

<h2>使用数组实现栈和队列</h2>

<h3><code>push</code> 和 <code>pop</code></h3>

<p>push操作相当于压栈，pop则相当于出栈。后进先出栈</p>

<p>``` javascript</p>

<p>var Stack = function(){</p>

<pre><code>this._stack = [];
</code></pre>

<p>}
//入栈
Stack.prototype.put = function(){</p>

<pre><code>return [].push.apply(this._stack,arguments);
</code></pre>

<p>}
//出栈
Stack.prototype.next = function(){</p>

<pre><code>return this._stack.pop();
</code></pre>

<p>}
//获取堆栈元素个数
Stack.prototype.size = function(){</p>

<pre><code>return this._stack.length;
</code></pre>

<p>}</p>

<p>var stack = new Stack(),current;</p>

<p>stack.put(1,2,3);
//遍历
while(current = stack.next()){</p>

<pre><code>console.log(current); // 3,2,1
</code></pre>

<p>}</p>

<p>```</p>

<h3><code>push</code> 和 <code>shift</code></h3>

<p>先进先出队列</p>

<p>```javascript</p>

<p>var Queue = function(){</p>

<pre><code>this._q = [];
</code></pre>

<p>}
//入列
Queue.prototype.push = function(){</p>

<pre><code>return [].push.apply(this._q,arguments);
</code></pre>

<p>}
//出列
Queue.prototype.next = function(){</p>

<pre><code>return this._q.shift();
</code></pre>

<p>}</p>

<p>Queue.prototype.size = function(){</p>

<pre><code>return this._q.length;
</code></pre>

<p>}</p>

<p>var queue = new Queue(),current;</p>

<p>queue.push(1,2,3);</p>

<p>while(current = queue.next()){</p>

<pre><code>console.log(current); // 1,2,3
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
